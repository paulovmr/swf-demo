apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: deploy-swf-demo-template
objects:
  - kind: ImageStream
    apiVersion: image.openshift.io/v1
    metadata:
      annotations:
        app.openshift.io/vcs-uri: "https://github.com/paulovmr/swf-demo"
      name: action-inferrer
      namespace: "${OPENSHIFT_NAMESPACE}"
      labels:
        app: action-inferrer
        app.kubernetes.io/component: action-inferrer
        app.kubernetes.io/instance: action-inferrer
        app.kubernetes.io/name: action-inferrer
        app.kubernetes.io/part-of: action-inferrer
    spec:
      lookupPolicy:
        local: false
  - kind: BuildConfig
    apiVersion: build.openshift.io/v1
    metadata:
      annotations:
        app.openshift.io/vcs-uri: "https://github.com/paulovmr/swf-demo"
      name: action-inferrer
      namespace: "${OPENSHIFT_NAMESPACE}"
      labels:
        app: action-inferrer
        app.kubernetes.io/component: action-inferrer
        app.kubernetes.io/instance: action-inferrer
        app.kubernetes.io/name: action-inferrer
        app.kubernetes.io/part-of: action-inferrer
    spec:
      nodeSelector: null
      output:
        to:
          kind: ImageStreamTag
          name: "action-inferrer:latest"
      strategy:
        type: Docker
        dockerStrategy:
          dockerfilePath: Dockerfile
      source:
        type: Git
        git:
          uri: "https://github.com/paulovmr/swf-demo"
        contextDir: action-inferrer
      runPolicy: Serial
  - apiVersion: serving.knative.dev/v1
    kind: Service
    metadata:
      annotations:
        app.openshift.io/route-disabled: "false"
        app.openshift.io/vcs-uri: "https://github.com/paulovmr/swf-demo"
        image.openshift.io/triggers: >-
          [{"from":{"kind":"ImageStreamTag","name":"action-inferrer:latest","namespace":"${OPENSHIFT_NAMESPACE}"},"fieldPath":"spec.template.spec.containers[?(@.name==\"action-inferrer\")].image","pause":"false"}]
      name: action-inferrer
      namespace: "${OPENSHIFT_NAMESPACE}"
      labels:
        app: action-inferrer
        app.kubernetes.io/component: action-inferrer
        app.kubernetes.io/instance: action-inferrer
        app.kubernetes.io/name: action-inferrer
        app.kubernetes.io/part-of: action-inferrer
    spec:
      template:
        metadata:
          annotations:
            autoscaling.knative.dev/target: "100"
            autoscaling.knative.dev/targetUtilizationPercentage: "70"
            autoscaling.knative.dev/window: 60s
          labels:
            app.kubernetes.io/component: action-inferrer
            app.kubernetes.io/instance: action-inferrer
            app.kubernetes.io/part-of: action-inferrer
        spec:
          containerConcurrency: 0
          containers:
            - image: >-
                image-registry.openshift-image-registry.svc:5000/${OPENSHIFT_NAMESPACE}/action-inferrer
              imagePullPolicy: Always
              name: action-inferrer
              ports:
                - containerPort: 3000
                  protocol: TCP
              readinessProbe:
                successThreshold: 1
                tcpSocket:
                  port: 0
          enableServiceLinks: false
          timeoutSeconds: 300
      traffic:
        - latestRevision: true
          percent: 100
  - kind: ImageStream
    apiVersion: image.openshift.io/v1
    metadata:
      annotations:
        app.openshift.io/vcs-uri: "https://github.com/paulovmr/swf-demo"
      name: ansible
      namespace: "${OPENSHIFT_NAMESPACE}"
      labels:
        app: ansible
        app.kubernetes.io/component: ansible
        app.kubernetes.io/instance: ansible
        app.kubernetes.io/name: ansible
        app.kubernetes.io/part-of: ansible
    spec:
      lookupPolicy:
        local: false
  - kind: BuildConfig
    apiVersion: build.openshift.io/v1
    metadata:
      annotations:
        app.openshift.io/vcs-uri: "https://github.com/paulovmr/swf-demo"
      name: ansible
      namespace: "${OPENSHIFT_NAMESPACE}"
      labels:
        app: ansible
        app.kubernetes.io/component: ansible
        app.kubernetes.io/instance: ansible
        app.kubernetes.io/name: ansible
        app.kubernetes.io/part-of: ansible
    spec:
      nodeSelector: null
      output:
        to:
          kind: ImageStreamTag
          name: "ansible:latest"
      strategy:
        type: Docker
        dockerStrategy:
          dockerfilePath: Dockerfile
      source:
        type: Git
        git:
          uri: "https://github.com/paulovmr/swf-demo"
        contextDir: ansible
      runPolicy: Serial
  - apiVersion: serving.knative.dev/v1
    kind: Service
    metadata:
      annotations:
        app.openshift.io/route-disabled: "false"
        app.openshift.io/vcs-uri: "https://github.com/paulovmr/swf-demo"
        image.openshift.io/triggers: >-
          [{"from":{"kind":"ImageStreamTag","name":"ansible:latest","namespace":"${OPENSHIFT_NAMESPACE}"},"fieldPath":"spec.template.spec.containers[?(@.name==\"ansible\")].image","pause":"false"}]
      name: ansible
      namespace: "${OPENSHIFT_NAMESPACE}"
      labels:
        app: ansible
        app.kubernetes.io/component: ansible
        app.kubernetes.io/instance: ansible
        app.kubernetes.io/name: ansible
        app.kubernetes.io/part-of: ansible
    spec:
      template:
        metadata:
          annotations:
            autoscaling.knative.dev/target: "100"
            autoscaling.knative.dev/targetUtilizationPercentage: "70"
            autoscaling.knative.dev/window: 60s
          labels:
            app.kubernetes.io/component: ansible
            app.kubernetes.io/instance: ansible
            app.kubernetes.io/part-of: ansible
        spec:
          containerConcurrency: 0
          containers:
            - image: >-
                image-registry.openshift-image-registry.svc:5000/${OPENSHIFT_NAMESPACE}/ansible
              imagePullPolicy: Always
              name: ansible
              ports:
                - containerPort: 3000
                  protocol: TCP
              readinessProbe:
                successThreshold: 1
                tcpSocket:
                  port: 0
          enableServiceLinks: false
          timeoutSeconds: 300
      traffic:
        - latestRevision: true
          percent: 100
  - kind: ImageStream
    apiVersion: image.openshift.io/v1
    metadata:
      annotations:
        app.openshift.io/vcs-uri: "https://github.com/paulovmr/swf-demo"
      name: monitoring-system
      namespace: "${OPENSHIFT_NAMESPACE}"
      labels:
        app: monitoring-system
        app.kubernetes.io/component: monitoring-system
        app.kubernetes.io/instance: monitoring-system
        app.kubernetes.io/name: monitoring-system
        app.kubernetes.io/part-of: monitoring-system
    spec:
      lookupPolicy:
        local: false
  - kind: BuildConfig
    apiVersion: build.openshift.io/v1
    metadata:
      annotations:
        app.openshift.io/vcs-uri: "https://github.com/paulovmr/swf-demo"
      name: monitoring-system
      namespace: "${OPENSHIFT_NAMESPACE}"
      labels:
        app: monitoring-system
        app.kubernetes.io/component: monitoring-system
        app.kubernetes.io/instance: monitoring-system
        app.kubernetes.io/name: monitoring-system
        app.kubernetes.io/part-of: monitoring-system
    spec:
      nodeSelector: null
      output:
        to:
          kind: ImageStreamTag
          name: "monitoring-system:latest"
      strategy:
        type: Docker
        dockerStrategy:
          dockerfilePath: Dockerfile
      source:
        type: Git
        git:
          uri: "https://github.com/paulovmr/swf-demo"
        contextDir: monitoring-system
      runPolicy: Serial
  - apiVersion: serving.knative.dev/v1
    kind: Service
    metadata:
      annotations:
        app.openshift.io/route-disabled: "false"
        app.openshift.io/vcs-uri: "https://github.com/paulovmr/swf-demo"
        image.openshift.io/triggers: >-
          [{"from":{"kind":"ImageStreamTag","name":"monitoring-system:latest","namespace":"${OPENSHIFT_NAMESPACE}"},"fieldPath":"spec.template.spec.containers[?(@.name==\"monitoring-system\")].image","pause":"false"}]
      name: monitoring-system
      namespace: "${OPENSHIFT_NAMESPACE}"
      labels:
        app: monitoring-system
        app.kubernetes.io/component: monitoring-system
        app.kubernetes.io/instance: monitoring-system
        app.kubernetes.io/name: monitoring-system
        app.kubernetes.io/part-of: monitoring-system
    spec:
      template:
        metadata:
          annotations:
            autoscaling.knative.dev/target: "100"
            autoscaling.knative.dev/targetUtilizationPercentage: "70"
            autoscaling.knative.dev/window: 60s
          labels:
            app.kubernetes.io/component: monitoring-system
            app.kubernetes.io/instance: monitoring-system
            app.kubernetes.io/part-of: monitoring-system
        spec:
          containerConcurrency: 0
          containers:
            - image: >-
                image-registry.openshift-image-registry.svc:5000/${OPENSHIFT_NAMESPACE}/monitoring-system
              imagePullPolicy: Always
              name: monitoring-system
              ports:
                - containerPort: 3000
                  protocol: TCP
              readinessProbe:
                successThreshold: 1
                tcpSocket:
                  port: 0
          enableServiceLinks: false
          timeoutSeconds: 300
      traffic:
        - latestRevision: true
          percent: 100
  - kind: ImageStream
    apiVersion: image.openshift.io/v1
    metadata:
      annotations:
        app.openshift.io/vcs-uri: "https://github.com/paulovmr/swf-demo"
      name: ticket-manager
      namespace: "${OPENSHIFT_NAMESPACE}"
      labels:
        app: ticket-manager
        app.kubernetes.io/component: ticket-manager
        app.kubernetes.io/instance: ticket-manager
        app.kubernetes.io/name: ticket-manager
        app.kubernetes.io/part-of: ticket-manager
    spec:
      lookupPolicy:
        local: false
  - kind: BuildConfig
    apiVersion: build.openshift.io/v1
    metadata:
      annotations:
        app.openshift.io/vcs-uri: "https://github.com/paulovmr/swf-demo"
      name: ticket-manager
      namespace: "${OPENSHIFT_NAMESPACE}"
      labels:
        app: ticket-manager
        app.kubernetes.io/component: ticket-manager
        app.kubernetes.io/instance: ticket-manager
        app.kubernetes.io/name: ticket-manager
        app.kubernetes.io/part-of: ticket-manager
    spec:
      nodeSelector: null
      output:
        to:
          kind: ImageStreamTag
          name: "ticket-manager:latest"
      strategy:
        type: Docker
        dockerStrategy:
          dockerfilePath: Dockerfile
      source:
        type: Git
        git:
          uri: "https://github.com/paulovmr/swf-demo"
        contextDir: ticket-manager
      runPolicy: Serial
  - apiVersion: serving.knative.dev/v1
    kind: Service
    metadata:
      annotations:
        app.openshift.io/route-disabled: "false"
        app.openshift.io/vcs-uri: "https://github.com/paulovmr/swf-demo"
        image.openshift.io/triggers: >-
          [{"from":{"kind":"ImageStreamTag","name":"ticket-manager:latest","namespace":"${OPENSHIFT_NAMESPACE}"},"fieldPath":"spec.template.spec.containers[?(@.name==\"ticket-manager\")].image","pause":"false"}]
      name: ticket-manager
      namespace: "${OPENSHIFT_NAMESPACE}"
      labels:
        app: ticket-manager
        app.kubernetes.io/component: ticket-manager
        app.kubernetes.io/instance: ticket-manager
        app.kubernetes.io/name: ticket-manager
        app.kubernetes.io/part-of: ticket-manager
    spec:
      template:
        metadata:
          annotations:
            autoscaling.knative.dev/target: "100"
            autoscaling.knative.dev/targetUtilizationPercentage: "70"
            autoscaling.knative.dev/window: 60s
          labels:
            app.kubernetes.io/component: ticket-manager
            app.kubernetes.io/instance: ticket-manager
            app.kubernetes.io/part-of: ticket-manager
        spec:
          containerConcurrency: 0
          containers:
            - image: >-
                image-registry.openshift-image-registry.svc:5000/${OPENSHIFT_NAMESPACE}/ticket-manager
              imagePullPolicy: Always
              name: ticket-manager
              ports:
                - containerPort: 3000
                  protocol: TCP
              readinessProbe:
                successThreshold: 1
                tcpSocket:
                  port: 0
          enableServiceLinks: false
          timeoutSeconds: 300
      traffic:
        - latestRevision: true
          percent: 100
  - kind: ImageStream
    apiVersion: image.openshift.io/v1
    metadata:
      annotations:
        app.openshift.io/vcs-uri: "https://github.com/paulovmr/swf-demo"
      name: serverless-workflow
      namespace: "${OPENSHIFT_NAMESPACE}"
      labels:
        app: serverless-workflow
        app.kubernetes.io/component: serverless-workflow
        app.kubernetes.io/instance: serverless-workflow
        app.kubernetes.io/name: serverless-workflow
        app.kubernetes.io/part-of: serverless-workflow
    spec:
      lookupPolicy:
        local: false
  - kind: BuildConfig
    apiVersion: build.openshift.io/v1
    metadata:
      annotations:
        app.openshift.io/vcs-uri: "https://github.com/paulovmr/swf-demo"
      name: serverless-workflow
      namespace: "${OPENSHIFT_NAMESPACE}"
      labels:
        app: serverless-workflow
        app.kubernetes.io/component: serverless-workflow
        app.kubernetes.io/instance: serverless-workflow
        app.kubernetes.io/name: serverless-workflow
        app.kubernetes.io/part-of: serverless-workflow
    spec:
      nodeSelector: null
      output:
        to:
          kind: ImageStreamTag
          name: "serverless-workflow:latest"
      strategy:
        type: Docker
        dockerStrategy:
          dockerfilePath: Dockerfile
      source:
        type: Git
        git:
          uri: "https://github.com/paulovmr/swf-demo"
        contextDir: serverless-workflow
      runPolicy: Serial
  - apiVersion: serving.knative.dev/v1
    kind: Service
    metadata:
      annotations:
        app.openshift.io/route-disabled: "false"
        app.openshift.io/vcs-uri: "https://github.com/paulovmr/swf-demo"
        image.openshift.io/triggers: >-
          [{"from":{"kind":"ImageStreamTag","name":"serverless-workflow:latest","namespace":"${OPENSHIFT_NAMESPACE}"},"fieldPath":"spec.template.spec.containers[?(@.name==\"serverless-workflow\")].image","pause":"false"}]
      name: serverless-workflow
      namespace: "${OPENSHIFT_NAMESPACE}"
      labels:
        app: serverless-workflow
        app.kubernetes.io/component: serverless-workflow
        app.kubernetes.io/instance: serverless-workflow
        app.kubernetes.io/name: serverless-workflow
        app.kubernetes.io/part-of: serverless-workflow
    spec:
      template:
        metadata:
          annotations:
            autoscaling.knative.dev/target: "100"
            autoscaling.knative.dev/targetUtilizationPercentage: "70"
            autoscaling.knative.dev/window: 60s
          labels:
            app.kubernetes.io/component: serverless-workflow
            app.kubernetes.io/instance: serverless-workflow
            app.kubernetes.io/part-of: serverless-workflow
        spec:
          containerConcurrency: 0
          containers:
            - image: >-
                image-registry.openshift-image-registry.svc:5000/${OPENSHIFT_NAMESPACE}/serverless-workflow
              imagePullPolicy: Always
              name: serverless-workflow
              ports:
                - containerPort: 8080
                  protocol: TCP
              readinessProbe:
                successThreshold: 1
                tcpSocket:
                  port: 0
          enableServiceLinks: false
          timeoutSeconds: 300
      traffic:
        - latestRevision: true
          percent: 100
parameters:
  - name: OPENSHIFT_NAMESPACE
    description: Namespace to create the resources
